"""
Test the subcommand scripts
"""

import os
from os import path
import unittest
import logging
import pprint
import csv
import sys
import json

from numpy import std, average

from msings.subcommands import analyzer
from msings.subcommands import count_msi_samples
from msings.subcommands import create_baseline
from msings.subcommands import formatter
from msings.subcommands import msi_sample_vs_control

#from msi.utils import munge_path

from __init__ import TestBase
import __init__ as config
log = logging.getLogger(__name__)

msi_testfiles = path.join(config.datadir, 'MSI')

control ='5437_E05_OPXv4_NA12878_MA0013'
NM_dict = {
    'NM_001202435': 'NM_001202435.1',
    'NM_006772': 'NM_006772.1',
    'NM_000038': 'NM_000038.5',
    'NM_007300': 'NM_007300.1',
    'NM_007297': 'NM_007297.2'
}
data1 = {'Gene': 'SCN1A',
         'Transcripts': 'SCN1A:NM_001202435:exon18:c.3199G>A:p.A1067T,',
         'Variant_Type': '',
         'Var_Reads': '-1', 'Ref_Reads': '-1'}
data2 = {'Gene': 'SYNGAP1',
         'Transcripts': 'SYNGAP1:NM_006772:exon11:c.1713G>A:p.S571S',
         'Variant_Type': 'upstream',
         'Var_Reads': '10', 'Ref_Reads': '90'}
data3 = {'Gene': 'BRCA1',
         'Transcripts': 'BRCA1:NM_007300:exon10:c.3113A>G:p.E1038G,BRCA1:NM_007297:exon9:c.2972A>G:p.E991G,BRCA1:NM_007294:exon10:c.3113A>G:p.E1038G',
         'Variant_Type': ''}


class TestMSISamplesvsControl(TestBase):
    """
    Test the msi pipeline scripts
    """

    def testTallyMSI(self):
        """Count the sites found and the mutants
        """
        control_info = csv.DictReader(open(path.join(msi_testfiles, 'testMSIcontrol')), delimiter='\t')
            #Store the dictreader in a variable to loop through it twice
        data = [row for row in control_info]
        msi_fname = path.join(msi_testfiles, '{}.msi.txt'.format(control))
        total, mutants, pfx = msi_sample_vs_control.tally_msi(data, msi_fname)
        self.assertEqual(total, 60)
        self.assertEqual(mutants, 1)
        self.assertEqual(pfx, '{}'.format(control))
                
class TestFormatter(TestBase):
    """
    Test the msi formatter script
    """
    def testCoords(self):
        row =['1', '45795895', '45795905', 'NAME1']
        output = '7 6031162 6031172'
        self.assertEqual(formatter.coords(row), output)
    def testMSIIntervalCreator(self):
        row =['1', '45795895']
        output = '7 6031162 6031172'
        self.assertEqual(formatter.coords(row), output)
        pass
